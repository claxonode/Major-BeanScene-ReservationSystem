@using System.Globalization;
@using Newtonsoft.Json;
@model Details

@{
    ViewData["Title"] = "Details";
}
<head>
    <link rel="stylesheet" href="~/css/bodyStylingForAllPages.css" />
    <style>
        .sittings-details{
            border: 2px solid #b27b43;
            border-radius:5px;
        }

        a {
            text-decoration:none;
        }

        a:hover {
            text-decoration:underline;
            color: #b27b43;
        }
    </style>
</head>

<div class="container-fluid d-flex flex-column min-vh-100">
    <div class="main-container flex-grow-1 bg-dark">
        <h4 class="text-center my-3"> @Model.Name Sitting Details</h4>
        <div class="container my-2">
            <div class="sittings-details m-2">
                <div class="row my-2 text-center">
                    <p class="col-md-6">
                        <strong>Sitting Id:</strong> @Model.Id
                    </p>
                    <p class="col-md-6">
                        <strong>Closed Sitting?:</strong> @Html.DisplayFor(model => model.IsClosed)
                    </p>
                </div>
                <div class="row my-2 text-center">
                    <p class="col-md-12">
                        <strong>Date/Time:</strong> @(Model.StartTime.ToString("dddd, d\" of \"MMMM h:mm tt") + " - " + Model.EndTime.ToString("dddd, d\" of \"MMMM h:mm tt"))
                    </p>
                </div>
                <div class="row my-2 text-center">
                    <p class="col-md-4">
                        <strong>Capacity:</strong> @Model.BookedGuest/@Model.Capacity
                    </p>   
                    <p class="col-md-4">
                        <strong>Restaurant:</strong> @Model.RestaurantNotAdapted.Name
                    </p>
                    <p class="col-md-4">
                        <strong>Sitting Type:</strong> @Model.SittingTypeNotAdapted.Name
                    </p>
                </div>
            </div>
        </div>
        <div class="text-center my-2">
            @{
                bool sittingInThePast = Model.EndTime < DateTime.Now;
            }
            <a class="@(sittingInThePast?"text-danger":"")" asp-area="Manager" asp-controller="Sittings" asp-route-id="@Model.Id" asp-action="Edit">Edit</a> |
            @* <a asp-action="Index">Back to List</a> | *@
            <a asp-controller="Home" asp-action="Calendar">Back to Calendar</a> |
            <a class="@(sittingInThePast?"text-danger":"")" asp-area="Manager" asp-controller="Sittings" asp-route-id="@Model.Id" asp-action="Delete">Delete</a>
        </div>
        <div>
            <h4 class="text-center">Reservations</h4>
            @if (DateTime.Now <= Model.EndTime)
            {
                <div class="text-center">
                    <a asp-area="Staff" asp-controller="Home" asp-route-chosenTime="@Model.StartTime.ToString("s")" asp-route-sittingId="@Model.Id" asp-action="Create">Make a reservation for this sitting</a>
                </div>


            }
            @if (TempData["Error"] != null)
            {
                <partial name="_ErrorMessage" />
            }
            @if (TempData["Success"] != null)
            {
                <partial name="_SuccessMessage" />
            }

            <hr />


            @if (!Model.ReservationsNotAdapted.Any())
            {
                <h4 class="text-center">No booked reservations</h4>
            }
            else
            {
                <div class="table-responsive m-2">
                    <table border="1" class="table" width="100%">
                        <thead>
                            <tr>
                                <td>First name</td>
                                <td>Last name</td>
                                <td>Email</td>
                                <td>Phone</td>
                                <td>Guest</td>
                                <td>Time</td>
                                <td>Origin</td>
                                <td>Status</td>
                                <td>Tables</td>
                                <td>Notes</td>
                                <td>Guest Info</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var u in Model.ReservationsNotAdapted)
                            {
                                <tr data-bs-toggle="modal" data-bs-target="#editModal" data-bs-resId="@u.Id" data-bs-pId="@u.Person.Id" data-bs-notes="@u.AdditionalNotes"
                            data-bs-guest="@(u.Guest != null ? $"{u.Guest.FirstName};{u.Guest.LastName};{u.Guest.Email};{u.Guest.PhoneNumber}" : "")"
                            data-bs-data="@($"{u.Id};{u.PersonId};{u.StartTime.ToString("s")};{u.SittingId};{u.Duration};{u.ReservationOrigin.Id};{u.ReservationStatus.Id}")">
                                    <td>@u.Person.FirstName</td>
                                    <td>@u.Person.LastName</td>
                                    <td>@u.Person.Email</td>
                                    <td>@u.Person.PhoneNumber</td>
                                    <td>@u.Guests</td>
                                    <td>@($"{u.StartTime.ToString("g")}  {u.Duration} (mins)")</td>
                                    <td>@u.ReservationOrigin.Name</td>
                                    <td>@u.ReservationStatus.Name</td>
                                    <td>
                                        @u.TablesToString
                                    </td>
                                    @if (u.AdditionalNotes == null)
                                    {
                                        <td class="text-danger">No additional notes</td>
                                    }
                                    else
                                    {
                                        <td>Click to see</td>
                                    }
                                    @if (u.Guest == null)
                                    {
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>@u.Guest.FullName</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            }
        </div>
    </div>
</div>



@await Html.PartialAsync("_EditReservationModal", Model.Reservation)
@section Scripts {
    <script src="~/js/ManagerSittingDetails.js"></script>
    <script>
        
        $("#delete").on("click",function (e){
            e.preventDefault();
            const id = $("#Id").val()
            $("#reservationForm").attr("action", "/Reservation/Delete").attr("asp-route", id)
            debugger;
            if (window.confirm("Are you sure you want to delete this reservation?")){
                $("#reservationForm").submit();
            }

        })
        $("#edit").on("click",function(e){
            e.preventDefault();
            const id = $("#Id").val()
            $("#reservationForm").attr("action","/Reservation/Edit").attr("asp-route",id)
            $("#reservationForm").submit()
        })

        
        //https://stackoverflow.com/questions/14375144/jquery-prevent-default-then-continue-default
                //https://stackoverflow.com/questions/26039603/process-a-form-submit-with-multiple-submit-buttons-in-javascript

        
    </script>
    
    @* <script>
        const callApi = (start) => {
            fetch(`/api/sittings/dateTime/${start}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    $('#SittingId').empty();
                    if (data.length === 0) {
                        $('#SittingId').append($("<option/>").attr('value', '').text("No available sittings"));
                    } else {
                        $('#SittingId').append($("<option/>").attr('value', '').text(`${data.length} available sittings`));
                        $.each(data, function (index, item) {
                            $('#SittingId').append($("<option />").attr('value', item.id).text(item.name));
                        });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                });
        }
        
        $("tr").click(function () {
            
            let currentTds = $(this).closest("tr").find("td"); // find all td of selected row
            let data = $(currentTds).parent().attr("data-bs-data")
            let splitData = data.split(';');
            let notes = $(currentTds).parent().attr("data-bs-notes");

            let firstName = $(currentTds).eq(0).text(); // eq= cell , text = inner text
            let lastName = $(currentTds).eq(1).text();
            let email = $(currentTds).eq(2).text();
            let phone = $(currentTds).eq(3).text();
            let guest = $(currentTds).eq(4).text();
   
            let start = splitData[0]
            let sitting = splitData[1]
            let duration = splitData[2]
            let origin = splitData[3]
            let status = splitData[4]

            $('#Reservation_FirstName').val(firstName)
            $('#Reservation_LastName').val(lastName)
            $('#Reservation_Email').val(email)
            $('#Reservation_PhoneNumber').val(phone)

            $('#StartTime').val(start)

            $('#SittingId').val(sitting)
            $('#Reservation_Duration').val(duration)
            $('#GuestsCount').val(guest)
            $('#OriginId').val(origin)
            $('#StatusId').val(status)
            $('#Reservation_AdditionalNotes').val(notes)

            //2023-09-01T07:30
            //Take a note of u.Start.ToString('s') and reconvert to ISO

            callApi(start);
            // fetch(`/api/sittings/dateTime/${start}`)
            // .then(response => {
            //     if (!response.ok) {
            //         throw new Error('Network response was not ok');
            //     }
            //     return response.json();
            // })
            // .then(data => {
            //     $('#SittingId').empty();
            //     if (data.length === 0) {
            //         $('#SittingId').append($("<option/>").attr('value', '').text("No available sittings"));
            //     } else {
            //         $('#SittingId').append($("<option/>").attr('value', '').text(`${data.length} available sittings`));
            //         $.each(data, function (index, item) {
            //             $('#SittingId').append($("<option />").attr('value', item.id).text(item.name));
            //         });
            //     }
            // })
            // .catch(error => {
            //     console.error("Error:", error);
            // });
            $('#StartTime').on("change", (function () {
                let selectedDate = $('#StartTime').val()

                callApi(selectedDate);
                // fetch(`/api/sittings/dateTime/${selectedDate}`)
                //     .then(response => {
                //         if (!response.ok) {
                //             throw new Error('Network response was not ok');
                //         }
                //         return response.json();
                //     })
                //     .then(data => {
                //         $('#SittingId').empty();
                //         if (data.length === 0) {
                //             $('#SittingId').append($("<option/>").attr('value', '').text("No available sittings"));
                //         } else {
                //             $('#SittingId').append($("<option/>").attr('value', '').text(`${data.length} available sittings`));
                //             $.each(data, function (index, item) {
                //                 $('#SittingId').append($("<option />").attr('value', item.id).text(item.name));
                //             });
                //         }
                //     })
                //     .catch(error => {
                //         console.error("Error:", error);
                //     });
            }));
                

        });
    </script> *@
    
}
